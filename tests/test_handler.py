import os
import subprocess
from itertools import product
from unittest import TestCase
from unittest.mock import Mock

from pysembench.handler import PysubytHandler
from pysembench.task import Task


class TestPysubytHandler(TestCase):
    def test_handle(self):
        """Generate a cartesian product of the possible inputs for a single
        pysubyt task and assert whether the shell commands generated by a
        PysubytHandler correspond to the expected shell commands.
        """
        force = [False, True]
        input = [None, "INPUT"]
        output = ["OUTPUT"]
        template_jinja_root = ["TEMPLATE_JINJA_ROOT"]
        template_file_name = ["TEMPLATE_FILE_NAME"]
        sets = [None, {"SET_KEY_1": "SET_VALUE_1", "SET_KEY_2": "SET_VALUE_2"}]
        mode = [None, "MODE"]

        grid = list(
            product(
                force,
                input,
                output,
                template_jinja_root,
                template_file_name,
                sets,
                mode,
            )
        )

        tasks = [
            Task(
                ".",
                ".",
                ".",
                {
                    "type": "pysubyt",
                    "input": g[1],
                    "output": g[2],
                    "template": {"jinja_root": g[3], "file_name": g[4]},
                    "sets": g[5],
                    "mode": g[6],
                },
                g[0],
            )
            for g in grid
        ]

        subprocess.check_call = Mock()

        actual = list(map(PysubytHandler().handle, tasks))
        expected = [
            f"pysubyt   --output .{os.path.sep}OUTPUT --templates .{os.path.sep}TEMPLATE_JINJA_ROOT --name TEMPLATE_FILE_NAME --mode iteration",  # noqa
            f"pysubyt   --output .{os.path.sep}OUTPUT --templates .{os.path.sep}TEMPLATE_JINJA_ROOT --name TEMPLATE_FILE_NAME --mode MODE",  # noqa
            f"pysubyt   --output .{os.path.sep}OUTPUT --templates .{os.path.sep}TEMPLATE_JINJA_ROOT --name TEMPLATE_FILE_NAME --set SET_KEY_1 .{os.path.sep}SET_VALUE_1 --set SET_KEY_2 .{os.path.sep}SET_VALUE_2 --mode iteration",  # noqa
            f"pysubyt   --output .{os.path.sep}OUTPUT --templates .{os.path.sep}TEMPLATE_JINJA_ROOT --name TEMPLATE_FILE_NAME --set SET_KEY_1 .{os.path.sep}SET_VALUE_1 --set SET_KEY_2 .{os.path.sep}SET_VALUE_2 --mode MODE",  # noqa
            f"pysubyt  --input .{os.path.sep}INPUT --output .{os.path.sep}OUTPUT --templates .{os.path.sep}TEMPLATE_JINJA_ROOT --name TEMPLATE_FILE_NAME --mode iteration",  # noqa
            f"pysubyt  --input .{os.path.sep}INPUT --output .{os.path.sep}OUTPUT --templates .{os.path.sep}TEMPLATE_JINJA_ROOT --name TEMPLATE_FILE_NAME --mode MODE",  # noqa
            f"pysubyt  --input .{os.path.sep}INPUT --output .{os.path.sep}OUTPUT --templates .{os.path.sep}TEMPLATE_JINJA_ROOT --name TEMPLATE_FILE_NAME --set SET_KEY_1 .{os.path.sep}SET_VALUE_1 --set SET_KEY_2 .{os.path.sep}SET_VALUE_2 --mode iteration",  # noqa
            f"pysubyt  --input .{os.path.sep}INPUT --output .{os.path.sep}OUTPUT --templates .{os.path.sep}TEMPLATE_JINJA_ROOT --name TEMPLATE_FILE_NAME --set SET_KEY_1 .{os.path.sep}SET_VALUE_1 --set SET_KEY_2 .{os.path.sep}SET_VALUE_2 --mode MODE",  # noqa
            f"pysubyt --force  --output .{os.path.sep}OUTPUT --templates .{os.path.sep}TEMPLATE_JINJA_ROOT --name TEMPLATE_FILE_NAME --mode iteration",  # noqa
            f"pysubyt --force  --output .{os.path.sep}OUTPUT --templates .{os.path.sep}TEMPLATE_JINJA_ROOT --name TEMPLATE_FILE_NAME --mode MODE",  # noqa
            f"pysubyt --force  --output .{os.path.sep}OUTPUT --templates .{os.path.sep}TEMPLATE_JINJA_ROOT --name TEMPLATE_FILE_NAME --set SET_KEY_1 .{os.path.sep}SET_VALUE_1 --set SET_KEY_2 .{os.path.sep}SET_VALUE_2 --mode iteration",  # noqa
            f"pysubyt --force  --output .{os.path.sep}OUTPUT --templates .{os.path.sep}TEMPLATE_JINJA_ROOT --name TEMPLATE_FILE_NAME --set SET_KEY_1 .{os.path.sep}SET_VALUE_1 --set SET_KEY_2 .{os.path.sep}SET_VALUE_2 --mode MODE",  # noqa
            f"pysubyt --force --input .{os.path.sep}INPUT --output .{os.path.sep}OUTPUT --templates .{os.path.sep}TEMPLATE_JINJA_ROOT --name TEMPLATE_FILE_NAME --mode iteration",  # noqa
            f"pysubyt --force --input .{os.path.sep}INPUT --output .{os.path.sep}OUTPUT --templates .{os.path.sep}TEMPLATE_JINJA_ROOT --name TEMPLATE_FILE_NAME --mode MODE",  # noqa
            f"pysubyt --force --input .{os.path.sep}INPUT --output .{os.path.sep}OUTPUT --templates .{os.path.sep}TEMPLATE_JINJA_ROOT --name TEMPLATE_FILE_NAME --set SET_KEY_1 .{os.path.sep}SET_VALUE_1 --set SET_KEY_2 .{os.path.sep}SET_VALUE_2 --mode iteration",  # noqa
            f"pysubyt --force --input .{os.path.sep}INPUT --output .{os.path.sep}OUTPUT --templates .{os.path.sep}TEMPLATE_JINJA_ROOT --name TEMPLATE_FILE_NAME --set SET_KEY_1 .{os.path.sep}SET_VALUE_1 --set SET_KEY_2 .{os.path.sep}SET_VALUE_2 --mode MODE",  # noqa
        ]
        self.assertEqual(actual, expected)
